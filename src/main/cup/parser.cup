import java_cup.runtime.*;
import java.io.InputStreamReader;
//import javafx.util.Pair;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import common.RelationRepository;

parser code {:
    private HashMap<String, Integer> variables_;                      //nazwa zmiennej -> jej wartość
    //private HashMap<String, Pair<List<String>,String>> ref_def_;      //nazwa relacji -> <Lista zmiennych, jej ciało>
    private HashMap<String, Set<Integer>> set_def_;

    private Set<Integer> tmp_set_;

    protected static TestLexer lexer;
    protected static ComplexSymbolFactory symbolFactory;

    public static void main(String args[]) throws Exception {
        //ComplexSymbolFactory f = new ComplexSymbolFactory();
        //lexer = new TestLexer(f,new InputStreamReader(System.in));
        ComplexSymbolFactory f = new ComplexSymbolFactory();
        symbolFactory = f;
        new parser(lexer,symbolFactory).parse();
        }
:}

init with {:
    tmp_set_= new HashSet<Integer>();

    variables_ = new HashMap<String, Integer>();
    //ref_def_ = new HashMap<String, Pair<List<String>,String>>();
    set_def_ = new HashMap<String, Set<Integer>>();
    lexer = new TestLexer(symbolFactory,new InputStreamReader(System.in));
:}

scan with {: return lexer.next_token(); :}

/* terminals */
terminal                        GT,LT,L_BRA,R_BRA,IS,SET_DELI,SEMI,REL_DEFINITION;
terminal        String          SET_OPERATORS;
terminal        String          REL;
terminal        List<Integer>   SET;
terminal        Integer         NUMBER;
terminal        String          VAR,SET_VAR;

/* non terminals */
non terminal    Integer         expr_var,expr_rel;
non terminal                    rel_def,statment_def_node,statment,expr_list,set;
non terminal    Integer         set_content;
non terminal    Set<Integer>    expr_set;

precedence left SET_OPERATORS;

start with expr_list;

/* unary operators */

/* grammar */

expr_list       ::= expr_list statment SEMI
                  | expr_list expr_var:e SEMI
                  | statment SEMI
                  | expr_var:e SEMI
                  | expr_list rel_def SEMI
                  | rel_def SEMI
                  ;//rel_def |


statment        ::= VAR:v1 IS expr_var:e1            {: //System.out.println("Statement "+v1+"="+e1);
                                                        variables_.put(v1,e1); :}
                  | SET_VAR:s1 IS expr_set:e             {: //System.out.println("statment set "+s1);
                                                        set_def_.put(s1,new HashSet<Integer>(e));
                                                        tmp_set_.clear(); :}
                  | expr_set:e                         {:System.out.println(""+e);
                                                        tmp_set_.clear(); :}
                    ;


expr_var        ::= NUMBER:n1                        {: System.out.println(""+n1); RESULT = n1; :}
                  | VAR:v1                           {: System.out.println(""+v1+"="+variables_.get(v1));
                                                        RESULT = variables_.get(v1); :}
//                |   expr_rel:r                       {: System.out.println("expr\n"); :}
                ;
expr_set        ::= SET_VAR:v                        {: //System.out.println(""+v+set_def_.get(v).toString());
                                                        //tmp_set_=set_def_.get(v);
                                                        RESULT = set_def_.get(v); :}
                  | set                              {: //System.out.println(""+tmp_set_.toString());
                                                        RESULT = tmp_set_;
                                                         :}
                  | expr_set:v1 SET_OPERATORS:o expr_set:v2 {: tmp_set_ = LogicSet.setOperation((v1),o,(v2));
                                                             RESULT = tmp_set_;
                                                                :}
                  ;
set             ::= L_BRA set_content R_BRA           //{: System.out.println("set"); :}
                ;

set_content     ::= NUMBER:n1 SET_DELI set_content   {: tmp_set_.add(n1);
                                                        RESULT = n1; :}
                  | NUMBER:n1                        {: tmp_set_.add(n1);
                                                        RESULT = n1; :}
                  ;
rel_def         ::= REL_DEFINITION VAR:v1 SET_VAR:r VAR:v2 L_BRA statment_def_node R_BRA
                    {: System.out.println("znaleziono def relacji\n");
                       //RelationRepository.addRelationName(r);
                       :}
                ;

statment_def_node    ::= VAR:v1 GT VAR:v2                                {: System.out.println("ciało relacji\n"); :}
                |   VAR:v1 LT VAR:v2                                {: System.out.println("ciało relacji\n"); :}
                |   VAR:v1                                          {: System.out.println("ciało relacji\n"); :}
                ;//DEF: a RRR b {a<b};


//expr_rel        ::= NUMBER:n1 REL:r NUMBER:n2                       {: System.out.println("expr_rel\n"); :}
//                ;

