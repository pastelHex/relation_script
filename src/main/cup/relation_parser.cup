import java_cup.runtime.*;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import common.RelationRepository;
import node.*;
import node.common.*;

parser code {:
    private static HashMap<String, Integer> variables_;                      //nazwa zmiennej -> jej wartość
    private static HashMap<String, Set<Integer>> set_def_;
    private static HashMap<String, Computable> ref_def_;

    private static Set<Integer> tmp_set_;

    protected static TestLexer lexer;
    protected static ComplexSymbolFactory symbolFactory;

    public static void setVariable(String name, Integer value){
        variables_.put(name,value);
    }

    public static void setSet(String name, Set<Integer> set){
        set_def_.put(name, set);
    }

    public static void main(String args[]) throws Exception {
        //ComplexSymbolFactory f = new ComplexSymbolFactory();
        //lexer = new TestLexer(f,new InputStreamReader(System.in));
        ComplexSymbolFactory f = new ComplexSymbolFactory();
        symbolFactory = f;
        new parser(lexer,symbolFactory).parse();
    }
:}

init with {:
    tmp_set_= new HashSet<Integer>();

    variables_ = new HashMap<String, Integer>();
    ref_def_ = new HashMap<String, Computable>();
    set_def_ = new HashMap<String, Set<Integer>>();
    lexer = new TestLexer(symbolFactory,new InputStreamReader(System.in));
:}

scan with {: return lexer.next_token(); :}

/* terminals */
terminal                        L_BRA,R_BRA,IS,SET_DELI,SEMI,REL_DEFINITION;
terminal        String          GT,LT,GT_EQ,LT_EQ,EQ,NOT_EQ;
terminal        String          SET_OPERATOR;
terminal        Integer         NUMBER;
terminal        String          VAR,SET_VAR;
terminal                        REL,ARROW,WIGGLY,IF;

/* non terminals */
non terminal    Integer         expr_var,expr_rel;
non terminal                    rel_def,statment,expr_list,set,if;
non terminal    Integer         set_content;
non terminal    Set<Integer>    expr_set;
non terminal    Computable      relation_node,statment_node;
non terminal    BiNode          var_def;
non terminal    Computable      if_def;

precedence left SET_OPERATOR,REL;

start with expr_list;

/* unary operators */

/* grammar */

expr_list       ::= expr_list statment SEMI
                  | expr_list expr_var:e SEMI
                  | statment SEMI
                  | expr_var:e SEMI
                  | expr_list rel_def SEMI
                  | rel_def SEMI
                  ;


statment        ::= VAR:v1 IS expr_var:e1            {: variables_.put(v1,e1); :}
                  | SET_VAR:s1 IS expr_set:e         {: set_def_.put(s1,new HashSet<Integer>(e));
                                                        tmp_set_.clear(); :}
                  | expr_set:e                       {:System.out.println(""+e);
                                                        tmp_set_.clear(); :}
                    ;


expr_var        ::= NUMBER:n1                        {: System.out.println(""+n1); RESULT = n1; :}
                  | VAR:v1                           {: System.out.println(""+v1+"="+variables_.get(v1));
                                                        RESULT = variables_.get(v1); :}
                  | expr_rel:r                       {: System.out.println("relation usage copleted");
                                                        RESULT = r; :}
                ;


expr_set        ::= SET_VAR:v                        {: RESULT = set_def_.get(v); :}
                  | set                              {: RESULT = tmp_set_;:}
                  | expr_set:v1 SET_OPERATOR:o expr_set:v2
                                                     {: tmp_set_ = LogicSet.setOperation((v1),o,(v2));
                                                        RESULT = tmp_set_; :}
                  ;
set             ::= L_BRA set_content R_BRA           //{: System.out.println("set"); :}
                ;

set_content     ::= NUMBER:n1 SET_DELI set_content   {: tmp_set_.add(n1);
                                                        RESULT = n1; :}
                  | NUMBER:n1                        {: tmp_set_.add(n1);
                                                        RESULT = n1; :}
                  ;
rel_def         ::= REL_DEFINITION VAR:v1 SET_VAR:r VAR:v2 L_BRA relation_node:n R_BRA
                                                     {: System.out.println("znaleziono def relacji");
                                                        RelationRepository.addRelationName(r);
                                                        HashMap<String,Integer> identifiers = new HashMap<>();
                                                        identifiers.put(v1,0); identifiers.put(v2,1);
                                                        n.setIdentificatorsToLeafs(identifiers);
                                                        ref_def_.put(r,n);
                                                        :}
                ;

relation_node   ::= var_def:v1 LT var_def:v2         {: BiNode node = new ComparisonNode(NodeType.SMALLER);
                                                        node.setLeftNode(v1); node.setRightNode(v2);
                                                        RESULT = node;:}
                  | var_def:v1 GT var_def:v2         {: BiNode node = new ComparisonNode(NodeType.GREATER);
                                                        node.setLeftNode(v1); node.setRightNode(v2);
                                                        RESULT = node;:}
                  | var_def:v1 LT_EQ var_def:v2      {: BiNode node = new ComparisonNode(NodeType.SMALLER_OR_EQUAL);
                                                        node.setLeftNode(v1); node.setRightNode(v2);
                                                        RESULT = node;:}
                  | var_def:v1 GT_EQ var_def:v2      {: BiNode node = new ComparisonNode(NodeType.GREATER_OR_EQUAL);
                                                        node.setLeftNode(v1); node.setRightNode(v2);
                                                        RESULT = node;:}
                  | var_def:v1 EQ var_def:v2         {: BiNode node = new ComparisonNode(NodeType.EQUAL);
                                                        node.setLeftNode(v1); node.setRightNode(v2);
                                                        RESULT = node;:}
                  | var_def:v1 NOT_EQ var_def:v2     {: BiNode node = new ComparisonNode(NodeType.NOT_EQUAL);
                                                        node.setLeftNode(v1); node.setRightNode(v2);
                                                        RESULT = node;:}
                  | var_def:v1                       {: RESULT = v1;:}
                  | if_def:n                         {: RESULT = n;:}
                  ;//DEF: a RRR b {a<b};

statment_node    ::= VAR:v1 IS expr_var:e1           {:  :}
 //                 | SET_VAR:s1 IS expr_set:e         {:  :}
                  ;
var_def         ::= VAR:v                            {: BiNode node = new VarNode(v);
                                                        RESULT = node;:}
                  | NUMBER:n                         {: BiNode node = new NumberNode(n);
                                                        RESULT = node;:}
                  ;

expr_rel        ::= expr_var:n1 REL:r expr_var:n2    {: BiContextNode ctx = new BiContextNode();
                                                        ctx.ctx[0] = n1; ctx.ctx[1] = n2;
                                                        Computable node = ref_def_.get(r);
                                                        Integer res = node.compute(ctx);
                                                        RESULT = res;
                                                        :}
                ;

if_def          ::= relation_node:e1 ARROW L_BRA relation_node:n1 R_BRA WIGGLY L_BRA relation_node:n2 R_BRA
                                                     {: TriNode triNode = new TriNode(e1, n1, n2);
                                                        RESULT = triNode; :}
//                  | relation_node:e1 ARROW L_BRA relation_node:n R_BRA
//                                                     {: TriNode triNode = new TriNode(e1, n, null);:}
                  ;
/*
if              ::= expr_var:e1 ARROW L_BRA statment R_BRA WIGGLY L_BRA statment R_BRA
                                                     {: if(e1 == 0){//
                                                        }:}
                  | expr_var:e1 ARROW L_BRA statment R_BRA
                                                     {: :}
                  ;*/
