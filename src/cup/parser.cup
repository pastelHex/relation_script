import java_cup.runtime.*;
import java.io.InputStreamReader;
import javafx.util.Pair;
import java.util.HashMap;
import java.util.List;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Set;

parser code {:
    private HashMap<String, Integer> variables_;                      //nazwa zmiennej -> jej wartość
    private HashMap<String, Pair<List<String>,String>> ref_def_;      //nazwa relacji -> <Lista zmiennych, jej ciało>
    private HashMap<String, Set<Integer>> set_def_;

    protected static TestLexer lexer;
    protected static ComplexSymbolFactory symbolFactory;

    public static void main(String args[]) throws Exception {
        //ComplexSymbolFactory f = new ComplexSymbolFactory();
        //lexer = new TestLexer(f,new InputStreamReader(System.in));
        ComplexSymbolFactory f = new ComplexSymbolFactory();
        symbolFactory = f;
        new parser(lexer,symbolFactory).parse();
        }
:}

init with {:
    variables_ = new HashMap<String, Integer>();
    ref_def_ = new HashMap<String, Pair<List<String>,String>>();
    set_def_ = new HashMap<String, Set<Integer>>();
    lexer = new TestLexer(symbolFactory,new InputStreamReader(System.in));
:}

scan with {: return lexer.next_token(); :}

/* terminals */
terminal                        GT,LT,L_BRA,R_BRA,IS,SET_DELI,SET_OPERATORS,SEMI;

terminal        String          REL;
terminal        List<Integer>   SET;
terminal        Integer         NUMBER;
terminal        String          VAR,SET_VAR;

/* non terminals */
non terminal    Integer         expr_var,expr_rel;
non terminal                    rel_def,statment_def,statment,program,set_content;

start with program;

/* unary operators */

/* grammar */

program         ::=  statment | expr_var;//rel_def |


statment        ::= VAR:v1 IS expr_var:e1 SEMI       {: System.out.println("Statement\n"+v1+e1); variables_.put(v1,e1); :}
                ;


expr_var        ::= NUMBER:n1                        {: System.out.println("expr\n"+n1); RESULT = n1; :}
                |   VAR:v1                           {: System.out.println("expr\n"+v1); RESULT = variables_.get(v1);:}
                |   expr_rel:r                       {: System.out.println("expr\n"); :}
                ;
//rel_def         ::= VAR:v1 REL:r VAR:v2 L_BRA statment_def R_BRA    {: System.out.println("znaleziono def relacji\n"); :}
//                ;

//statment_def    ::= VAR:v1 GT VAR:v2                                {: System.out.println("ciało relacji\n"); :}
//                |   VAR:v1 LT VAR:v2                                {: System.out.println("ciało relacji\n"); :}
//                |   VAR:v1                                          {: System.out.println("ciało relacji\n"); :}
//                ;
//expr_set        ::= SET_VAR:s1 IS L_BRA set_content R_BRA           {: System.out.println("set\n"); :}
//                ;
//set_content     ::= NUMBER:n1 SET_DELI
//                |   NUMBER:n1
//                ;

//expr_rel        ::= NUMBER:n1 REL:r NUMBER:n2                       {: System.out.println("expr_rel\n"); :}
//                ;

